tabItem("tab1",
fluidRow(
box(width = 3,
echarts4rOutput("vnmap",
height = "500px"),
solidHeader = TRUE
),
box(width = 9,
plotlyOutput("p1",
height = "500px"),
solidHeader = TRUE)
)),
tabItem("tab2",
fluidRow(
box(DTOutput("table1"), solidHeader = TRUE)
))
)
)
)
server <- function(input, output, session){
## render echart map
output$vnmap <- renderEcharts4r({
hs_graduated %>%
filter(year == 2016) %>%
e_charts(dia_phuong) %>%
e_map_register("vn", geojson_vn) %>%
e_map(pct_graduated, map = "vn") %>%
e_visual_map(pct_graduated) %>%
# e_theme("infographic") %>%
e_title("Pct graduated 2016",
subtext = "click on map to get more information\n")
})
#selectd on echart
province_selected <- reactive({
if (is.null(input$vnmap_clicked_data$name))( "ha_noi")
else (make_clean_names(input$vnmap_clicked_data$name))
})
observeEvent(input$vnmap_clicked_data, {print(input$vnmap_clicked_data$name)})
## render DT
output$table1 <- renderDT({
school_stat %>%
filter(clean_name == province_selected()) %>%
select(-clean_name) %>%
datatable()
})
## render plot
output$p1 <- renderPlotly({
(school_stat %>%
mutate(yeaer = as.factor(year)) %>%
filter(clean_name == province_selected()) %>%
pivot_longer(c(n_student,n_teacher, n_school, n_class)) %>%
ggplot(aes(year, value, color = education_level, group = education_level,
text = glue("Year: {year}
{name}: {value}
Province: {dia_phuong}")))+
geom_line(size = .4, alpha = .6)+
geom_point(size = .8)+
labs(x = NULL,
y= NULL,
color = "Education")+
scale_color_manual(values = my_pal[1:3],
labels = c("Elementary", "Middle school", "High school"))+
scale_x_discrete(breaks = seq(2002, 2019, 3))+
facet_wrap(~name, scale = "free", strip.position = "left")+
theme_facet) %>%
ggplotly(tooltip = "text")
})
}
shinyApp(ui, server)
ui <- dashboardPage(title = "Edu dashboard",
dashboardHeader(title = "Edu dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("General information", tabName = "tab1",icon = icon("globe")),
menuItem("data table", tabName = "tab2", icon = icon("table"))
)
),
dashboardBody(
tabItems(
tabItem("tab1",
fluidRow(
box(width = 3,
echarts4rOutput("vnmap",
height = "500px"),
solidHeader = TRUE
),
box(width = 9,
plotlyOutput("p1",
height = "500px"),
solidHeader = TRUE)
)),
tabItem("tab2",
fluidRow(
box(DTOutput("table1"), solidHeader = TRUE)
))
)
)
)
server <- function(input, output, session){
## render echart map
output$vnmap <- renderEcharts4r({
hs_graduated %>%
filter(year == 2016) %>%
e_charts(dia_phuong) %>%
e_map_register("vn", geojson_vn) %>%
e_map(pct_graduated, map = "vn") %>%
e_visual_map(pct_graduated) %>%
# e_theme("infographic") %>%
e_title("Pct graduated 2016",
subtext = "click on map to get more information\n")
})
#selectd on echart
province_selected <- reactive({
if (is.null(input$vnmap_clicked_data$name))( "ha_noi")
else (make_clean_names(input$vnmap_clicked_data$name))
})
observeEvent(input$vnmap_clicked_data, {print(input$vnmap_clicked_data$name)})
## render DT
output$table1 <- renderDT({
school_stat %>%
filter(clean_name == province_selected()) %>%
select(-clean_name) %>%
datatable()
})
## render plot
output$p1 <- renderPlotly({
(school_stat %>%
mutate(yeaer = as.factor(year)) %>%
filter(clean_name == province_selected()) %>%
pivot_longer(c(n_student,n_teacher, n_school, n_class)) %>%
ggplot(aes(year, value, color = education_level, group = education_level,
text = glue("Year: {year}
{name}: {value}
Province: {dia_phuong}")))+
geom_line(size = .4, alpha = .6)+
geom_point(size = .8)+
labs(x = NULL,
y= NULL,
color = "Education")+
scale_color_manual(values = my_pal[1:3],
labels = c("Elementary", "Middle school", "High school"))+
scale_x_discrete(breaks = seq(2002, 2019, 3))+
facet_wrap(~name, scale = "free", strip.position = "left")+
theme_facet) %>%
ggplotly(tooltip = "text")
})
}
shinyApp(ui, server)
ui <- dashboardPage(
title = "Edu dashboard",
dashboardHeader(title = "Edu dashboard"),
dashboardSidebar(sidebarMenu(
menuItem(
"General information",
tabName = "tab1",
icon = icon("globe")
),
menuItem("data table", tabName = "tab2", icon = icon("table"))
)),
dashboardBody(tabItems(
tabItem("tab1",
fluidRow(
box(
width = 3,
echarts4rOutput("vnmap",
height = "500px"),
solidHeader = TRUE
),
box(
width = 9,
plotlyOutput("p1",
height = "500px"),
solidHeader = TRUE
)
)),
tabItem("tab2",
fluidRow(box(width = 8,
DTOutput("table1"), solidHeader = TRUE
)))
))
)
server <- function(input, output, session){
## render echart map
output$vnmap <- renderEcharts4r({
hs_graduated %>%
filter(year == 2016) %>%
e_charts(dia_phuong) %>%
e_map_register("vn", geojson_vn) %>%
e_map(pct_graduated, map = "vn") %>%
e_visual_map(pct_graduated) %>%
# e_theme("infographic") %>%
e_title("Pct graduated 2016",
subtext = "click on map to get more information\n")
})
#selectd on echart
province_selected <- reactive({
if (is.null(input$vnmap_clicked_data$name)) ("ha_noi")
else (make_clean_names(input$vnmap_clicked_data$name))
})
observeEvent(input$vnmap_clicked_data, {print(input$vnmap_clicked_data$name)})
## render DT
output$table1 <- renderDT({
school_stat %>%
filter(clean_name == province_selected()) %>%
select(-clean_name) %>%
datatable()
})
## render plot
output$p1 <- renderPlotly({
(school_stat %>%
mutate(yeaer = as.factor(year)) %>%
filter(clean_name == province_selected()) %>%
pivot_longer(c(n_student,n_teacher, n_school, n_class)) %>%
ggplot(aes(year, value, color = education_level, group = education_level,
text = glue("Year: {year}
{name}: {value}
Province: {dia_phuong}")))+
geom_line(size = .4, alpha = .6)+
geom_point(size = .8)+
labs(x = NULL,
y= NULL,
color = "Education")+
scale_color_manual(values = my_pal[1:3],
labels = c("Elementary", "Middle school", "High school"))+
scale_x_discrete(breaks = seq(2002, 2019, 3))+
facet_wrap(~name, scale = "free", strip.position = "left")+
theme_facet) %>%
ggplotly(tooltip = "text")
})
}
shinyApp(ui, server)
ui <- dashboardPage(
title = "Edu dashboard",
dashboardHeader(title = "Edu dashboard"),
dashboardSidebar(sidebarMenu(
menuItem(
"General information",
tabName = "tab1",
icon = icon("globe")
),
menuItem("data table", tabName = "tab2", icon = icon("table"))
)),
dashboardBody(tabItems(
tabItem("tab1",
fluidRow(
box(
width = 3,
echarts4rOutput("vnmap",
height = "500px"),
solidHeader = TRUE
),
box(
width = 9,
plotlyOutput("p1",
height = "500px"),
solidHeader = TRUE
)
)),
tabItem("tab2",
fluidRow(box(width = 9,
DTOutput("table1"), solidHeader = TRUE
)))
))
)
server <- function(input, output, session){
## render echart map
output$vnmap <- renderEcharts4r({
hs_graduated %>%
filter(year == 2016) %>%
e_charts(dia_phuong) %>%
e_map_register("vn", geojson_vn) %>%
e_map(pct_graduated, map = "vn") %>%
e_visual_map(pct_graduated) %>%
# e_theme("infographic") %>%
e_title("Pct graduated 2016",
subtext = "click on map to get more information\n")
})
#selectd on echart
province_selected <- reactive({
if (is.null(input$vnmap_clicked_data$name)) ("ha_noi")
else (make_clean_names(input$vnmap_clicked_data$name))
})
observeEvent(input$vnmap_clicked_data, {print(input$vnmap_clicked_data$name)})
## render DT
output$table1 <- renderDT({
school_stat %>%
filter(clean_name == province_selected()) %>%
select(-clean_name) %>%
datatable()
})
## render plot
output$p1 <- renderPlotly({
(school_stat %>%
mutate(yeaer = as.factor(year)) %>%
filter(clean_name == province_selected()) %>%
pivot_longer(c(n_student,n_teacher, n_school, n_class)) %>%
ggplot(aes(year, value, color = education_level, group = education_level,
text = glue("Year: {year}
{name}: {value}
Province: {dia_phuong}")))+
geom_line(size = .4, alpha = .6)+
geom_point(size = .8)+
labs(x = NULL,
y= NULL,
color = "Education")+
scale_color_manual(values = my_pal[1:3],
labels = c("Elementary", "Middle school", "High school"))+
scale_x_discrete(breaks = seq(2002, 2019, 3))+
facet_wrap(~name, scale = "free", strip.position = "left")+
theme_facet) %>%
ggplotly(tooltip = "text")
})
}
shinyApp(ui, server)
library(scales)
server <- function(input, output, session){
## render echart map
output$vnmap <- renderEcharts4r({
hs_graduated %>%
filter(year == 2016) %>%
e_charts(dia_phuong) %>%
e_map_register("vn", geojson_vn) %>%
e_map(pct_graduated, map = "vn") %>%
e_visual_map(pct_graduated) %>%
# e_theme("infographic") %>%
e_title("Pct graduated 2016",
subtext = "click on map to get more information\n")
})
#selectd on echart
province_selected <- reactive({
if (is.null(input$vnmap_clicked_data$name)) ("ha_noi")
else (make_clean_names(input$vnmap_clicked_data$name))
})
observeEvent(input$vnmap_clicked_data, {print(input$vnmap_clicked_data$name)})
## render DT
output$table1 <- renderDT({
school_stat %>%
filter(clean_name == province_selected()) %>%
select(-clean_name) %>%
datatable()
})
## render plot
output$p1 <- renderPlotly({
(school_stat %>%
mutate(yeaer = as.factor(year)) %>%
filter(clean_name == province_selected()) %>%
pivot_longer(c(n_student,n_teacher, n_school, n_class)) %>%
ggplot(aes(year, value, color = education_level, group = education_level,
text = glue("Year: {year}
{name}: {value}
Province: {dia_phuong}")))+
geom_line(size = .4, alpha = .6)+
geom_point(size = .8)+
labs(x = NULL,
y= NULL,
color = "Education")+
scale_color_manual(values = my_pal[1:3],
labels = c("Elementary", "Middle school", "High school"))+
scale_x_discrete(breaks = seq(2002, 2019, 3))+
scale_y_continuous(labels = comma)+
facet_wrap(~name, scale = "free", strip.position = "left")+
theme_facet) %>%
ggplotly(tooltip = "text")
})
}
shinyApp(ui, server)
server <- function(input, output, session){
## render echart map
output$vnmap <- renderEcharts4r({
hs_graduated %>%
filter(year == 2016) %>%
e_charts(dia_phuong) %>%
e_map_register("vn", geojson_vn) %>%
e_map(pct_graduated, map = "vn") %>%
e_visual_map(pct_graduated) %>%
# e_theme("infographic") %>%
e_title("Pct graduated 2016",
subtext = "click on map to get more information\n")
})
#selectd on echart
province_selected <- reactive({
if (is.null(input$vnmap_clicked_data$name)) ("ha_noi")
else (make_clean_names(input$vnmap_clicked_data$name))
})
observeEvent(input$vnmap_clicked_data, {print(input$vnmap_clicked_data$name)})
## render DT
output$table1 <- renderDT({
school_stat %>%
filter(clean_name == province_selected()) %>%
select(-clean_name) %>%
datatable()
})
## render plot
output$p1 <- renderPlotly({
(school_stat %>%
mutate(yeaer = as.factor(year)) %>%
filter(clean_name == province_selected()) %>%
pivot_longer(c(n_student,n_teacher, n_school, n_class)) %>%
ggplot(aes(year, value, color = education_level, group = education_level,
text = glue("Year: {year}
{name}: {value}
Province: {dia_phuong}")))+
geom_line(size = .4, alpha = .6)+
geom_point(size = .8)+
labs(x = NULL,
y= NULL,
color = "Education")+
scale_color_manual(values = my_pal[1:3],
labels = c("Elementary", "Middle school", "High school"))+
scale_x_discrete(breaks = seq(2002, 2019, 3))+
scale_y_continuous(labels = comma)+
facet_wrap(~name, scale = "free", strip.position = "left")+
theme_facet) %>%
ggplotly(tooltip = "text") %>%
layout(hovermode = "x")
})
}
shinyApp(ui, server)
country
library(shiny); runApp('education-dashboard/education-dash-board.R')
# prepare data -------------------------------------------------------------
school_stat <- read_rds("cleanded-data/education/n_school-student-teacher.rds")
library(here)
runApp('education-dashboard/education-dash-board.R')
runApp('education-dashboard/education-dash-board.R')
runApp('education-dashboard/education-dash-board.R')
runApp('education-dashboard/education-dash-board.R')
runApp('education-dashboard/education-dash-board.R')
runApp('education-dashboard/education-dash-board.R')
school_stat
school_stat$dia_phuong[school_stat$clean_name == "ha_noi"]
school_stat %>%
distinct(clean_name, dia_phuong)
equal_name <- school_stat %>%
distinct(clean_name, dia_phuong)
equal_name$dia_phuong[equal_name$clean_name == "ha_noi"]
runApp('education-dashboard/education-dash-board.R')
equal_name$dia_phuong[equal_name$clean_name == "ha_noi"]
runApp('education-dashboard/education-dash-board.R')
runApp('education-dashboard/education-dash-board.R')
runApp('education-dashboard/education-dash-board.R')
runApp('education-dashboard/education-dash-board.R')
runApp('education-dashboard/education-dash-board.R')
runApp('education-dashboard/education-dash-board.R')
runApp('education-dashboard/education-dash-board.R')
runApp('education-dashboard/education-dash-board.R')
runApp('education-dashboard/education-dash-board.R')
runApp('education-dashboard/education-dash-board.R')
# Server ------------------------------------------------------------------
server <- function(input, output, session){
## render echart map
output$vnmap <- renderEcharts4r({
hs_graduated %>%
filter(year == 2016) %>%
e_charts(dia_phuong) %>%
e_map_register("vn", geojson_vn) %>%
e_map(pct_graduated, map = "vn") %>%
e_visual_map(pct_graduated) %>%
# e_theme("infographic") %>%
e_title("Pct graduated 2016",
subtext = "click on map to get more information\n")
})
#selectd on echart
province_selected <- reactive({
if (is.null(input$vnmap_clicked_data$name)) ("ha_noi")
else (make_clean_names(input$vnmap_clicked_data$name))
})
observeEvent(input$vnmap_clicked_data, {print(input$vnmap_clicked_data$name)})
## render DT
output$table1 <- renderDT({
school_stat %>%
filter(clean_name == province_selected()) %>%
select(-clean_name) %>%
datatable()
})
## render plot
output$p1 <- renderPlotly({
df <- school_stat %>%
mutate(year = as.factor(year)) %>%
filter(clean_name == province_selected()) %>%
pivot_longer(c(n_student,n_teacher, n_school, n_class)) %>%
mutate(name = case_when(name == "n_class" ~  "Number of classes",
name == "n_student" ~  "Number of students",
name == "n_teacher" ~  "Number of teachers",
name == "n_school" ~ "Number of schools"))
plot <-  df %>%
ggplot(aes(year, value, color = education_level, group = education_level,
text = glue("Year: {year}
value: {value}")))+
geom_line(size = .4, alpha = .6)+
geom_point(size = .8)+
labs(title =glue("{df$dia_phuong[[1]]} Province"),
subtitle = " ",
x = NULL,
y= NULL,
color = "Education")+
scale_color_manual(values = my_pal[1:3],
labels = c("Elementary", "Middle school", "High school"))+
scale_x_discrete(breaks = seq(2002, 2019, 3))+
scale_y_continuous(labels = comma)+
facet_wrap(~name, scale = "free", strip.position = "left")+
theme_facet
ggplotly(plot, tooltip = "text") %>%
layout(hovermode = "x")
})
}
shinyApp(ui, server)
runApp('education-dashboard/education-dash-board.R')
runApp('education-dashboard/education-dash-board.R')
runApp('education-dashboard/education-dash-board.R')
runApp('education-dashboard/education-dash-board.R')
runApp('education-dashboard/education-dash-board.R')
